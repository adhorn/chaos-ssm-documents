---
#==================================================
# SSM Run Command Document:
# Defines the configuration and the steps to
# run by SSM Run Command on Ec2 Instances
#==================================================
description: |
  ## What does this document do?
  It drops incoming or outgoing traffic for a configurable protocol (tcp or udp) and port using iptables. If iptables is not already installed on the instance, this SSM document will install it together with other dependencies listed below.
  This SSM document supports Amazon Linux and Ubuntu operating systems only.

  ## Dependencies installed by this SSM Document
  * iptables
  * atd
  Note: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).

  ## Input Parameters
  * Protocol: (Required) The protocol to blackhole.
  * Port: (Required) The port to blackhole.
  * TrafficType: The type of traffic to blackhole (default: ingress).
  * DurationSeconds: (Required) The duration - in seconds - of the test.
  * InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).

schemaVersion: '2.2'
parameters:
  Protocol:
    type: String
    description: (Required) Specify the protocol to blackhole (tcp|udp).
    allowedValues:
    - tcp
    - udp
  Port:
    type: String
    description: (Required) Specify the port to blackhole.
    allowedPattern: ^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$
  TrafficType:
    type: String
    description: 'Specify the type of traffic to blackhole (egress|ingress) (default:
      ingress).'
    default: ingress
    allowedValues:
    - egress
    - ingress
  DurationSeconds:
    type: String
    description: (Required) The duration - in seconds - of the test.
    allowedPattern: ^[0-9]+$
  InstallDependencies:
    type: String
    description: 'If set to True, Systems Manager installs the required dependencies
      on the target instances. (default: True).'
    default: 'True'
    allowedValues:
    - 'True'
    - 'False'
mainSteps:
- action: aws:runShellScript
  name: InstallDependencies
  precondition:
    StringEquals:
    - platformType
    - Linux
  description: |
    ## Parameter: InstallDependencies
    If set to True, this echo installs the required dependecy via operating system's repository. It supports both
    Debian (apt) and CentOS (yum) based package managers.
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash

      if [[ "$( which iptables 2>/dev/null )" && "$( which atd 2>/dev/null )" ]]; then echo dependencies already installed. ; exit ; fi
      if  [[ "{{ InstallDependencies }}" == True ]] ; then
        echo "Installing required dependencies"
        if [ -f  "/etc/system-release" ] ; then
          if cat /etc/system-release | grep -i 'Amazon Linux release 2023' ; then
            sudo dnf -y install iptables at
          elif cat /etc/system-release | grep -i 'Amazon Linux' ; then
            yum -y install iptables at
          else
            echo "There was a problem installing dependencies."
            exit 1
          fi
        elif cat /etc/issue | grep -i Ubuntu ; then
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get install -y iptables at
        else
          echo "There was a problem installing dependencies."
          exit 1
        fi
      else
        echo "Dependencies are not installed - Please set InstallDependencies to True."
        exit 1
      fi
- action: aws:runShellScript
  name: FaultInjection
  precondition:
    StringEquals:
    - platformType
    - Linux
  description: |
    ## Parameters: Protocol, Port, TrafficType, and DurationSeconds
    This step blocks  `Protocol` 'TrafficType' traffic to `Port` for the given `DurationSeconds`, using the `iptables` command.
    The script will block the traffic, and wait for the given duration to remove that. It has two rollback mechanisms in place:
    * It will listen for exit signals (SIGINT and SIGTERM), and will stop the fault injection if any of them is received.
    * It will periodically enqueue rollback checks into a queue (using `at` command). This way, if the command is stopped and the rollback
    was not executed, the enqueued commands will to stop it. (for example, if the command is stopped using kill -9). This is just
    and extra safety check to avoid the fault to remain injected after the script is no longer running.
  inputs:
    maxAttempts: 1
    runCommand:
    - |
      #!/bin/bash

      PORT={{ Port }}
      PROTOCOL={{ Protocol }}
      DURATION={{ DurationSeconds }}
      TRAFFIC={{ TrafficType }}

      if [ $DURATION -lt 1 ] || [ $DURATION -gt 43200 ]; then
          echo "Parameter DurationSeconds must be between 1 and 43200, was: '$DURATION'"
          exit 1
      fi

      FAULT_NAME="Run-Network-Blackhole-Port"

      IP_REGEX="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"

      DELETE_MSG="#delete-after-fault-injection"
      IMDS_IP=169.254.169.254

      # Get the REGION of the instance
      EC2_REGION=$(
        TOKEN=`curl -s -X PUT "http://$IMDS_IP/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 30"` &&
        curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://$IMDS_IP/latest/dynamic/instance-identity/document |
        grep region | awk -F\" '{print $4}'
      )

      # List of endpoint we want to preserve (SSM and EC2 metadata API)
      ENDPOINTS=(
          "ssmmessages.$EC2_REGION.amazonaws.com"
          "ssm.$EC2_REGION.amazonaws.com"
          "ec2messages.$EC2_REGION.amazonaws.com"
          $IMDS_IP
      )

      force_dns()
      {
          # Force any new DNS resolution for that host to the latests known IPs
          echo "$1 $2 $DELETE_MSG" >> /etc/hosts
      }

      get_ips()
      {
          # Returns if the input is a valid IP string, empty otherwise
          local var_ip
          var_ip=$(grep -E "$IP_REGEX" <<< "$1")
          [  -z "$var_ip" ] || { echo "$var_ip" ; return ;}

          # Returns IPs of the domain and force DNS resolution to that IP, empty otherwise
          local var_dns
          var_dns=$(dig +short $1)
          [  -z "$var_dns" ] || { echo "$var_dns" ; force_dns "$var_dns" "$1" ; return ;}
      }

      # Creating the fault commands
      read -r -d '' ENABLE_FAULT_COMMAND <<'EOF'

      # Exit if FIS network fault is already running
      test_file_exit() {
          if [ "$(ls "$1" 2>/dev/null | wc -l)" -ge "1" ]; then { echo "Fault might be already running (Found flag file matching "$1"). Exiting..." 1>&2 ; exit 1; } ; fi;
      }
      test_file_exit /var/lib/amazon/ssm/Run-Network-*.flag

      if [[ "${PORT}" =~ ^(443|80)$ ]] && [ "$TRAFFIC" = "egress" ]; then
          # Create new iptables chain
          iptables -N fault-in || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }
          iptables -N fault-out || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }

          # Allowlist the SSM endpoints
          for e in ${ENDPOINTS[*]};
              do
                  get_ips $e >/dev/null 2>&1 # Get the IP and modify the /etc/hosts for domain names
                  iptables -A fault-out -p tcp --dport ${PORT} -d $e -j ACCEPT
                  iptables -A fault-in -m conntrack --ctstate ESTABLISHED,RELATED -d $e -j ACCEPT
          done
          iptables -I INPUT -j fault-in

          # Block the requested port/protocol
          iptables -A fault-out -p ${PROTOCOL} --dport ${PORT} -j DROP
          iptables -I OUTPUT -j fault-out

      elif ! [[ "${PORT}" =~ ^(443|80)$ ]] && [ "${TRAFFIC}" = "egress" ] ; then
          # Create new iptables chain
          iptables -N fault-out || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }
          # Block the requested port/protocol
          iptables -A fault-out -p ${PROTOCOL} --dport ${PORT} -j DROP
          iptables -I OUTPUT -j fault-out

      elif [ "${TRAFFIC}" = "ingress" ] ; then
          # Create new iptables chain
          iptables -N fault-in || { echo iptables chain already exist, fault might be already running. Exiting... 1>&2 ; exit 1; }
          # Block the requested port/protocol
          iptables -A fault-in -p ${PROTOCOL} --dport ${PORT} -j DROP
          iptables -I INPUT -j fault-in
      fi

      EOF

      # Creating the disable fault commands
      read -r -d '' DISABLE_FAULT_COMMAND <<EOF
      echo "Rolling back..."
      check_chain_exists()
      {
          iptables --list "\$1" >/dev/null 2>&1
      }
      if check_chain_exists fault-out; then
          iptables -F fault-out
          iptables -D OUTPUT -j fault-out
          iptables -X fault-out
      fi
      if check_chain_exists  fault-in; then
          iptables -F fault-in
          iptables -D INPUT -j fault-in
          iptables -X fault-in
      fi
      sed -ie "/$DELETE_MSG/d" /etc/hosts
      EOF

      STOP_TIME=$(( $(date +%s) + $DURATION ))

      MAX_FLAG_AGE_SECONDS=5
      ATTEMPT_ROLLBACK_AT_SECONDS=10

      RANDOM_STRING=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 32)
      FLAG_PATH="/var/lib/amazon/ssm/$FAULT_NAME-$RANDOM_STRING.flag"
      ROLLBACK_PATH="/var/lib/amazon/ssm/$FAULT_NAME-$RANDOM_STRING-Rollback.sh"

      # Creating a file with rollback check command to be executed by atd
      cat << EOF > "$ROLLBACK_PATH"
      #!/bin/bash
      # Dont sleep if run in terminal
      if ! [ -t 0 ] ; then
        sleep $ATTEMPT_ROLLBACK_AT_SECONDS
      fi
      if ! [ -f "$FLAG_PATH" ] || [ "\$(( \$(date +%s) - \$(stat -c "%Y" "$FLAG_PATH") ))" -gt $MAX_FLAG_AGE_SECONDS ] || [ -t 0 ]; then
        $DISABLE_FAULT_COMMAND
        rm -f "$FLAG_PATH"
        # Dont delete rollback script if run in terminal
        if ! [ -t 0 ] ; then
          rm -f "$ROLLBACK_PATH"
        fi
      fi
      EOF
      echo "Temporary rollback file created: $ROLLBACK_PATH"

      # Enqueue a rollback check after $ATTEMPT_ROLLBACK_AT_SECONDS seconds
      schedule_rollback_attempt() {
        echo "bash $ROLLBACK_PATH" | at now 2> >(sed '/warning: commands will be executed using \/bin\/sh/d' )
      }

      # Function to delete the flag file and rollback the fault injection
      rollback() {
        rm "$FLAG_PATH"
        rm "$ROLLBACK_PATH"
        eval "$DISABLE_FAULT_COMMAND" ; STATUS=$?
        echo Rollback done.
        exit $STATUS
      }

      # Binding the rollback function to these exit signals
      trap rollback INT
      trap rollback TERM

      echo "Making sure atd daemon is running"
      # atd must be running in order to use "at" later
      atd || { echo Failed to run atd daemon, exiting... 1>&2 ; exit 1; }

      echo "Scheduling rollback"
      schedule_rollback_attempt

      # Injecting fault
      echo "Enabling fault injection"
      eval "$ENABLE_FAULT_COMMAND"

      # For the duration of the injection, the flag file is updated, and a rollback check is enqueued
      while [[ $(date +%s) -lt $STOP_TIME ]] ; do
        touch "$FLAG_PATH"
        schedule_rollback_attempt
        sleep $MAX_FLAG_AGE_SECONDS
      done

      # After the desired duration, the fault injection is removed
      rollback
