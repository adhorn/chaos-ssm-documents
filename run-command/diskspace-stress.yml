---
#==================================================
# SSM Run Command Document:
# Defines the configuration and the steps to
# run by SSM Run Command on Ec2 Instances
#==================================================
description: |
  ## What does this document do?
  It runs disk filling stress on an instance via stress-ng tool. If stress-ng is not already installed on the instance, this SSM document will install it, unless InstallDependencies parameter is set to False.
  This SSM document supports Amazon Linux and Ubuntu operating systems only.
  
  ## Dependencies installed by this SSM Document
  * stress-ng
  Note: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).

  
  ## Input Parameters
  * DurationSeconds: (Required) The duration - in seconds - of the Disk stress.
  * Workers: Specify the number of workers continually fallocating (preallocating file space).
  * Filesize: Allocated  file  size in GB (default  is 1).
  * InstallDependencies: If set to True, this SSM document installs the required dependencies on the target instances. (default True)

schemaVersion: '2.2'
parameters:
  DurationSeconds:
    type: String
    description: '(Required) The duration - in seconds - of the Disk stress.'
    allowedPattern: "^[0-9]+$"
    default: "60"
  Workers:
    type: String
    description: 'Specify the number of Fallocate workers to use (default: 4)'
    default: "4"
    allowedPattern: "^[0-9]+$"
  Filesize:
    type: String
    description: 'Specify the Filesize in GB to use (default: 1)'
    default: "1"
    allowedPattern: "^[0-9]+$"
  InstallDependencies:
    type: String
    description: 'If set to True, Systems Manager installs the required dependencies on the target instances (default: True)'
    default: 'True'
    allowedValues:
      - 'True'
      - 'False'
mainSteps:
- action: aws:runShellScript
  name: InstallDependencies
  precondition:
    StringEquals:
    - platformType
    - Linux
  description: |
    ## Parameter: InstallDependencies
    If set to True, this step installs the required dependecy via operating system's repository. It supports both
    Debian (apt) and CentOS (yum) based package managers.
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash

      if [[ "$( which stress-ng 2>/dev/null )" ]] ; then echo Dependency is already installed. ; exit ; fi
      if  [[ "{{ InstallDependencies }}" == True ]] ; then
        echo "Installing required dependencies"
        if [ -f  "/etc/system-release" ] ; then
          if cat /etc/system-release | grep -i 'Amazon Linux release 2023' ; then
            sudo dnf -y install stress-ng
          elif cat /etc/system-release | grep -i 'Amazon Linux' ; then
            # Use amazon-linux-extras if available (Amazon Linux 2). Don't need it otherwise (Amazon Linux 1)
            which amazon-linux-extras 2>/dev/null 1>&2 && sudo amazon-linux-extras install testing
            sudo yum -y install stress-ng
          else
            echo "There was a problem installing dependencies."
            exit 1
          fi
        elif cat /etc/issue | grep -i Ubuntu ; then
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y stress-ng
        else
          echo "There was a problem installing dependencies."
          exit 1
        fi
      else
        echo "Dependencies are not installed - Please set InstallDependencies to True."
        exit 1
      fi
- action: aws:runShellScript
  precondition:
    StringEquals:
      - platformType
      - Linux
  name: ExecuteStressNg
  description: |
    ## Parameters: DurationSeconds, Workers, Filesize
    This step will stress the Disk with the specified Filesize for the specified DurationSeconds time
    in seconds.
  inputs:
    maxAttempts: 1
    runCommand:
    - |
      #!/bin/bash

      if [ {{ DurationSeconds }} -lt 1 ] || [ {{ DurationSeconds }} -gt 43200 ] ; then echo DurationSeconds parameter value must be between 1 and 43200 && exit 1; fi
      pgrep stress-ng && echo Another stress-ng command is running, exiting... && exit 1
      echo Initiating Disk stress for {{ DurationSeconds }} seconds...
      stress-ng --fallocate {{ Workers }} --fallocate-bytes {{ Filesize }}g -t {{ DurationSeconds }}s
      echo Finished Disk stress.
