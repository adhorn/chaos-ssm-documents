---
#==================================================
# SSM Run Command Document:
# Defines the configuration and the steps to
# run by SSM Run Command on Ec2 Instances
#==================================================
description: |
  ## What does this document do?
  It adds packet loss using the tool tc to outgoing or incoming traffic from a configurable list of sources (Supported: IPv4, IPv4/CIDR, Domain name, DYNAMODB|S3). If tc is not already installed on the instance, this SSM document will install it together with other dependencies listed below.
  This SSM document supports Amazon Linux and Ubuntu operating systems only.

  ## Dependencies installed by this SSM Document
  * tc
  * jq
  * atd
  Note: This SSM document does not uninstall dependencies once installed. If you don't want this SSM document to install any dependencies, set InstallDependencies to False and bake the dependencies into your EC2 instance. For example, by using image-builder (https://aws.amazon.com/image-builder/).

  ## Input Parameters
  * Interface: The interface to add packet loss to (default: eth0).
  * LossPercent: The percent of packet loss (default: 7).
  * Sources: (Required) Specify a comma separated list of sources to add packet loss to (Supported: IPv4, IPv4/CIDR, Domain name, DYNAMODB|S3) - e.g. "DYNAMODB,www.example.com,72.21.198.64/32,72.21.198.67".
  * TrafficType: The type of traffic to affect (default: ingress).
  * DurationSeconds: (Required) The duration - in seconds - of the test.
  * InstallDependencies: If set to True, Systems Manager installs the required dependencies on the target instances. (default: True).


schemaVersion: '2.2'
parameters:
  Interface:
    type: String
    description: 'The interface to add packet loss to (default: eth0).'
    default: eth0
    allowedPattern: ^[0-9a-zA-Z\-]{1,15}$
  Sources:
    type: String
    description: '(Required) Specify a comma separated list of sources to add packet
      loss to (Supported: IPv4, IPv4/CIDR, Domain name, DYNAMODB|S3).'
    allowedPattern: ^[0-9a-zA-Z./,-]+$
  TrafficType:
    type: String
    description: 'Specify the type of traffic to affect (egress|ingress) (default:
      ingress).'
    default: ingress
    allowedValues:
    - egress
    - ingress
  LossPercent:
    type: String
    description: 'The percent of packet loss. (default: 10).'
    default: '10'
    allowedPattern: ^([1-9][0-9]?|100)$
  DurationSeconds:
    type: String
    description: (Required) The duration - in seconds - of the test.
    allowedPattern: ^[0-9]+$
  InstallDependencies:
    type: String
    description: 'If set to True, Systems Manager installs the required dependencies
      on the target instances. (default: True).'
    default: 'True'
    allowedValues:
    - 'True'
    - 'False'
mainSteps:
- action: aws:runShellScript
  name: InstallDependencies
  precondition:
    StringEquals:
    - platformType
    - Linux
  description: |
    ## Parameter: InstallDependencies
    If set to True, this step installs the required dependecy via operating system's repository. It supports both
    Debian (apt) and CentOS (yum) based package managers.
  inputs:
    onFailure: exit
    runCommand:
    - |
      #!/bin/bash

      if [[ "$( which tc 2>/dev/null )" && "$( which jq 2>/dev/null )" && "$( which atd 2>/dev/null )" ]] ; then echo Dependency is already installed. ; exit ; fi
      if  [[ "{{ InstallDependencies }}" == True ]] ; then
        echo "Installing required dependencies"
        if [ -f  "/etc/system-release" ] ; then
          if cat /etc/system-release | grep -i 'Amazon Linux release 2023' ; then
            sudo dnf -y install iproute-tc jq a
            sudo dnf -y install bind-utils
          elif cat /etc/system-release | grep -i 'Amazon Linux' ; then
            sudo amazon-linux-extras install testing
            sudo yum -y install tc jq at
          else
            echo "There was a problem installing dependencies."
            exit 1
          fi
        elif cat /etc/issue | grep -i Ubuntu ; then
          sudo apt-get update -y
          sudo DEBIAN_FRONTEND=noninteractive sudo apt-get install -y iproute2 jq at
        else
          echo "Exiting - This SSM document supports Amazon Linux and Ubuntu operating systems only."
          exit 1
        fi
      else
        echo "Dependencies are not installed - Please set InstallDependencies to True."
        exit 1
      fi
- action: aws:runShellScript
  name: FaultInjection
  precondition:
    StringEquals:
    - platformType
    - Linux
  description: |
    ## Parameters: Sources, TrafficType, Interface, LossPercent, and DurationSeconds
    This step starts by extracting the IP for all the `Sources` provided and adds a `LossPercent` (in percent) to `TrafficType` traffic on the `Interface` for the given `DurationSeconds`, using the `tc` (Traffic Control) command.
    The script will inject packet loss on the `TrafficType` traffic for the `Sources`, and wait for the given duration to remove that. It has two rollback mechanisms in place:
    * It will listen for exit signals (SIGINT and SIGTERM), and will stop the packet loss injection if any of them is received.
    * It will periodically enqueue rollback checks into a queue (using `at` command). This way, if the command is stopped and the rollback
    was not executed, the enqueued commands will try to stop it. (for example, if the command is stopped using kill -9). This is just
    an extra safety check to avoid having the packet loss remain injected after the script is no longer running.
  inputs:
    maxAttempts: 1
    runCommand:
    - |
      #!/bin/bash

      INTERFACE={{ Interface }}
      LOSS={{ LossPercent }}
      DURATION={{ DurationSeconds }}
      SOURCES={{ Sources }}
      TRAFFIC={{ TrafficType }}

      if ! [[ "$( ip a ls $INTERFACE 2>/dev/null )" ]] ; then
        echo "Interface $INTERFACE does not exist."
        exit 1
      fi

      if [ $DURATION -lt 1 ] || [ $DURATION -gt 43200 ]; then
        echo "Parameter DurationSeconds must be between 1 and 43200, was: '$DURATION'"
        exit 1
      fi

      if [ $LOSS -lt 0 ] || [ $LOSS -gt 100 ]; then
        echo "Parameter Loss must be a value between 0 and 100, was: '$LOSS'"
        exit 1
      fi

      FAULT_NAME="Run-Network-Packet-Loss-Sources"

      if [ "$TRAFFIC" = "ingress" ]; then
        ip a ls ifb0 1>/dev/null 2>&1 && { echo "Fault might be already running (Interface ifb0 already exists). Exiting..." 1>&2 ; exit 1; }
      fi

      IP_CIDR_REGEX="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$"
      IP_REGEX="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
      IMDS_IP=169.254.169.254

      # Get the REGION of the instance
      EC2_REGION=$(
        TOKEN=`curl -s -X PUT "http://$IMDS_IP/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 30"` &&
        curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://$IMDS_IP/latest/dynamic/instance-identity/document |
        grep region | awk -F\" '{print $4}'
      )

      IP_ADDRESSES=()
      IP_ADDRESSES_SSM_ENDPOINTS=()
      INVALID_SOURCE=()

      DELETE_MSG="#delete-after-fault-injection"

      # List of endpoint we want to preserve (SSM and EC2 metadata API)
      ENDPOINTS=(
        "ssmmessages.$EC2_REGION.amazonaws.com"
        "ssm.$EC2_REGION.amazonaws.com"
        "ec2messages.$EC2_REGION.amazonaws.com"
        $IMDS_IP
      )

      force_dns()
      {
          # Force any new DNS resolution for that host to the latest known IPs
          params=("$@")
          hostname=${params[0]}   # Hostname is expected as first argument
          ips=("${params[@]:1}")  # The rest will be the IPs
          for ip in $(echo "${ips[@]}"); do
            echo "$ip $hostname $DELETE_MSG" >> /etc/hosts
          done
      }

      get_ips()
      {
          # Returns if the input is a valid IP/CIDR string, empty otherwise
          local var_ip_cidr=$(grep -E "$IP_CIDR_REGEX" <<< "$1")
          [  -z "$var_ip_cidr" ] || { echo $var_ip_cidr ; return ;}

          # Returns if the input is a valid IP string, empty otherwise
          local var_ip=$(grep -E "$IP_REGEX" <<< "$1")
          [  -z "$var_ip" ] || { echo $var_ip ; return ;}

          # Returns IPs of the domain and force DNS resolution to that IP, empty otherwise
          # Since `dig` can return different IPs, we call it 10 times to maximize the chances of covering as many IPs as possible for the provided domain
          local var_dns=()
          for i in $(seq 1 10)
          do
              dig_output=( $(dig +short $1 | grep -v '[[:alpha:]]') )
              var_dns=("${var_dns[@]}" "${dig_output[@]}")
          done
          var_unique_dns=( $(printf '%s\n' "${var_dns[@]}" | sort -u) )
          [  -z "$var_unique_dns" ] || { echo "${var_unique_dns[@]}" ; force_dns $1 "${var_unique_dns[@]}" ; return ;}

          # Only accepting DYNAMODB and S3 from ip-range service
          if [[ "$1" =~ ^("DYNAMODB"|"S3")$ ]]; then
            # Return IPS of the Service, empty otherwise
            curl -s https://ip-ranges.amazonaws.com/ip-ranges.json --connect-timeout 5 | jq -r '.prefixes[] | select(.region=="'$EC2_REGION'") | select(.service=="'$1'") | .ip_prefix'
          fi
      }

      # Prepare the sources and get IPs for all of them
      for source in ${SOURCES//,/ }
      do
          ips=$(get_ips $source)
          if [ -n "$ips" ]; then
            for ip in ${ips[*]}
              do
              IP_ADDRESSES=("${IP_ADDRESSES[@]}" "${ip}")
            done
          else
              INVALID_SOURCE=("${INVALID_SOURCE[@]}" "${source}")
          fi
      done

      if [ -n "$INVALID_SOURCE" ]; then
        echo "Invalid sources (malformed service name, DNS or IP address): ${INVALID_SOURCE[*]}"
        exit 1
      fi
      echo "Target IPs and ranges: ${IP_ADDRESSES[*]}"

      # Getting IPs from SSM endpoints
      for e in ${ENDPOINTS[*]}; do
          var_endpoint=$(get_ips $e)
          IP_ADDRESSES_SSM_ENDPOINTS=("${IP_ADDRESSES_SSM_ENDPOINTS[@]}" "${var_endpoint[@]}")
      done

      #Check if any of the SSM endpoint IPs are in the sources and exiting if true
      for e in ${IP_ADDRESSES[*]};
        do
          [[ "${IP_ADDRESSES_SSM_ENDPOINTS[@]}" =~ "${e}" ]] && { echo "Sources contain protected SSM endpoint: ${e} - exiting" ; sed -ie "/$DELETE_MSG/d" /etc/hosts ;  exit 1 ;}
      done

      # Adds Packet Loss to Outgoing traffic if TrafficType is egress
      if [ "$TRAFFIC" = "egress" ]; then
      read -r -d '' ENABLE_FAULT_COMMAND <<'EOF'
        # Check if fault injection already running, exit if true
        test_file_exit() {
            if [ "$(ls "$1" 2>/dev/null | wc -l)" -ge "1" ]; then { echo "Fault might be already running (Found flag file matching "$1"). Exiting..." 1>&2 ; exit 1; } ; fi;
        }
        test_file_exit /var/lib/amazon/ssm/Run-Network-*.flag

        echo "Injecting fault..."
        # Send all traffic by default to the band 1:3
        tc qdisc add dev $INTERFACE root handle 1: prio priomap 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
        # Creates the qdisc in the band 0, but since all traffic goes to band 3, it does not affect it
        tc qdisc add dev $INTERFACE parent 1:1 handle 10: netem loss "${LOSS}"%
        for k in ${IP_ADDRESSES[*]}; do
            # Redirect the matching ip addresses to the band 0
            tc filter add dev $INTERFACE protocol ip parent 1:0 prio 1 u32 match ip dst $k flowid 1:1
        done
      EOF

      # Removes Packet Loss to Outgoing traffic if TrafficType is egress
      read -r -d '' DISABLE_FAULT_COMMAND <<EOF
        echo "Rolling back..."
        tc qdisc del dev $INTERFACE parent 1:1 handle 10:
        tc filter del dev $INTERFACE prio 1
        tc qdisc del dev $INTERFACE root handle 1: prio
        sed -ie "/$DELETE_MSG/d" /etc/hosts
      EOF
      fi

      # Adds Packet Loss from Incoming traffic if TrafficType is ingress
      if [ "$TRAFFIC" = "ingress" ]; then
      read -r -d '' ENABLE_FAULT_COMMAND <<'EOF'
        # Check if fault injection already running, exit if true
        test_file_exit() {
            if [ "$(ls "$1" 2>/dev/null | wc -l)" -ge "1" ]; then { echo "Fault might be already running (Found flag file matching "$1"). Exiting..." 1>&2 ; exit 1; } ; fi;
        }
        test_file_exit /var/lib/amazon/ssm/Run-Network-*.flag

        echo "Injecting fault..."
        # tc can only add packet loss on egress traffic so we use an intermediate device ifb
        # Loading the ifb module (Intermediate Functional Block device)
        modprobe ifb
        # Bring up the interface
        ip link set dev ifb0 up
        # Add an ingress queue to the interface
        tc qdisc add dev $INTERFACE ingress
        for k in ${IP_ADDRESSES[*]}; do
            # Redirect matching traffic to ifb
            tc filter add dev $INTERFACE parent ffff: protocol ip prio 2 u32 match ip src $k flowid 1:1 action mirred egress redirect dev ifb0
        done
        # Apply packet loss to the ifb interface, leaving the rest untouched
        tc qdisc add dev ifb0 root netem loss "${LOSS}"%
      EOF

      # Removes Packet Loss from Incoming traffic if TrafficType is ingress
      read -r -d '' DISABLE_FAULT_COMMAND <<EOF
        echo "Rolling back..."
        tc qdisc del dev $INTERFACE ingress
        tc qdisc del dev ifb0 root
        rmmod ifb
        sed -ie "/$DELETE_MSG/d" /etc/hosts
      EOF
      fi


      STOP_TIME=$(( $(date +%s) + $DURATION ))

      MAX_FLAG_AGE_SECONDS=5
      ATTEMPT_ROLLBACK_AT_SECONDS=10

      RANDOM_STRING=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 32)
      FLAG_PATH="/var/lib/amazon/ssm/$FAULT_NAME-$RANDOM_STRING.flag"
      ROLLBACK_PATH="/var/lib/amazon/ssm/$FAULT_NAME-$RANDOM_STRING-Rollback.sh"

      # Creating a file with rollback check command to be executed by atd
      cat << EOF > "$ROLLBACK_PATH"
      #!/bin/bash
      # Dont sleep if run in terminal
      if ! [ -t 0 ] ; then
        sleep $ATTEMPT_ROLLBACK_AT_SECONDS
      fi
      if ! [ -f "$FLAG_PATH" ] || [ "\$(( \$(date +%s) - \$(stat -c "%Y" "$FLAG_PATH") ))" -gt $MAX_FLAG_AGE_SECONDS ] || [ -t 0 ]; then
        $DISABLE_FAULT_COMMAND
        rm -f "$FLAG_PATH"
        # Dont delete rollback script if run in terminal
        if ! [ -t 0 ] ; then
          rm -f "$ROLLBACK_PATH"
        fi
      fi
      EOF
      echo "Temporary rollback file created: $ROLLBACK_PATH"

      # Enqueue a rollback check after $ATTEMPT_ROLLBACK_AT_SECONDS seconds
      schedule_rollback_attempt() {
        echo "bash $ROLLBACK_PATH" | at now 2> >(sed '/warning: commands will be executed using \/bin\/sh/d' )
      }

      # Function to delete the flag file and rollback the fault injection
      rollback() {
        rm "$FLAG_PATH"
        rm "$ROLLBACK_PATH"
        eval "$DISABLE_FAULT_COMMAND" ; STATUS=$?
        echo Rollback done.
        exit $STATUS
      }

      # Binding the rollback function to these exit signals
      trap rollback INT
      trap rollback TERM

      echo "Making sure atd daemon is running"
      # atd must be running in order to use "at" later
      atd || { echo Failed to run atd daemon, exiting... 1>&2 ; exit 1; }

      echo "Scheduling rollback"
      schedule_rollback_attempt

      # Injecting fault
      echo "Enabling fault injection"
      eval "$ENABLE_FAULT_COMMAND"

      # For the duration of the injection, the flag file is updated, and a rollback check is enqueued
      while [[ $(date +%s) -lt $STOP_TIME ]] ; do
        touch "$FLAG_PATH"
        schedule_rollback_attempt
        sleep $MAX_FLAG_AGE_SECONDS
      done

      # After the desired duration, the fault injection is removed
      rollback
